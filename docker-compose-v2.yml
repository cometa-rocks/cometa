version: '3.8'

x-common-vars: &common-vars
  # Start dev
  DEV: "-dev"
  # Front
  FRONT_SERVER_HOST: "cometa_front"
  SOCKET_SERVER_URL: "cometa_socket"
  SOCKET_SERVER_PORT: "3001"
  # Backend
  DJANGO_SERVER_URL: "cometa_django"
  DJANGO_SERVER_PORT: "8000"
  DATABASE_SERVER: "db"
  DATABASE_PORT: "5432"
  # Behave
  BEHAVE_SERVER_URL: "cometa_behave"
  BEHAVE_SERVER_PORT: "8001"
  REDIS_WORKERS: "10"
  THREADS: "10"
  # Redis
  REDIS_SERVER: "cometa_redis"
  REDIS_PORT: "6379"
  # Selenoid
  SELENOID_SERVER_URL: "cometa_selenoid"
  SELENOID_SERVER_PORT: 4444
  VIDEO_EXTENSION: "mp4"
  # NoVNC
  NOVNC_SERVER_URL: "cometa_novnc"
  NOVNC_SERVER_PORT: 8080
  # Crontab/Scheduler
  CRONTAB_SERVER_URL: "cometa_scheduler"
  CRONTAB_SERVER_PORT: "8080"
  # Etc
  IS_KUBERNETES_INSTALLATION: false

services:
  db:
    container_name: cometa_postgres
    image: postgres:12.1
    volumes:
      - ./backend:/code
      - ./backend/db_data:/var/lib/postgresql/data
    expose:
      - "5532"
    networks:
     - testing
    restart: always

  django:
    container_name: cometa_django
    image: cometa/django:0.1
    logging:
      driver: json-file
    user: "0:0"  # Run as root user
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    privileged: true
    entrypoint: sh -c './start_pod.sh ${DEV}'
    environment:
      <<: *common-vars
      PYTHONUNBUFFERED: "1"
    volumes:
      - ./data/cometa/screenshots:/code/behave/screenshots
      - ./data/cometa/videos:/code/behave/videos
      - ./data/cometa/pdf:/code/behave/pdf
      - ./data/cometa/downloads:/code/behave/downloads
      - ./backend:/code
      - ./backend/src:/opt/code:rw
      - "./backend/crontabs/cometa_django_crontab:/etc/cron.d/crontab"
    working_dir: /opt/code
    ports:
      - "8000:8000"
    depends_on:
      - db
    links:
      - behave:cometabehave.local
    networks:
     - testing
    restart: always

  behave:
    container_name: cometa_behave
    image: cometa/behave:latest
    logging:
      driver: json-file
    expose:
      - "8001"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./data/cometa/screenshots:/opt/code/screenshots
      - ./data/cometa/videos:/opt/code/videos
      - ./data/cometa/pdf:/code/behave/pdf
      - ./data/cometa/downloads:/code/behave/downloads
      - ./backend/behave:/opt/code:rw
      - ./backend:/code
    entrypoint: "/opt/code/entry.sh"
    working_dir: /opt/code/behave_django
    environment:
      <<: *common-vars
      PYTHONUNBUFFERED: "1"
    networks:
     - testing
    restart: always

  ws:
    container_name: cometa_socket
    image: node:14
    working_dir: /home/node/app
    logging:
      driver: json-file
    environment:
      NODE_ENV: production
      NPM_CONFIG_LOGLEVEL: info
    volumes:
      - ./backend/ws-server:/home/node/app:rw
    ports:
      - "3001:3001"
    command: "npm run-script start"
    networks:
     - testing
    restart: always

  selenoid:
    # Please use ./selenoid/deploy_selenoid.sh to create necessary files of Selenoid
    image: aerokube/selenoid:1.11.2
    container_name: cometa_selenoid
    logging:
      driver: json-file
    ports:
      - 4444:4444
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend/selenoid/:/etc/selenoid/:ro
      - ./data/cometa/videos:/opt/selenoid/video
    environment:
      TZ: Europe/Berlin
      OVERRIDE_VIDEO_OUTPUT_DIR: /data/cometa/videos
    networks:
      - testing
    restart: always
    # entrypoint with limit on browser executions to CPU-2 or Defaulting to 2 if number is less then 2
    entrypoint: sh -c "LIMIT=$$(($$(nproc)-2))  && LIMIT=$$((LIMIT > 2 ? $$LIMIT:2)) && /usr/bin/selenoid \
      -listen :4444 \
      -conf /etc/selenoid/browsers.json \
      -video-output-dir /opt/selenoid/video \
      -log-output-dir /opt/selenoid/logs \
      -container-network cometa_testing \
      -limit $$LIMIT"

  novnc:
    image: cometa/novnc:1.0
    container_name: cometa_novnc
    networks:
      - testing
    restart: always

  scheduler:
    image: cometa/scheduler:latest
    container_name: cometa_scheduler
    environment:
      <<: *common-vars
    networks:
      - testing
    restart: always

  apache:
    image: "cometa/front:latest"
    container_name: cometa_front
    user: "0:0"  # Run as root user
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    environment:
      <<: *common-vars
    volumes:
      - ./front/:/code/front
      - ./front/apache-conf/httpd.conf:/usr/local/apache2/conf/httpd.conf
      - ./front/apache-conf/openidc.conf_local:/usr/local/apache2/conf/openidc.conf
      - ./front/apache-conf/paths.conf:/usr/local/apache2/conf/paths.conf
      - ./front/apache-conf/mod_auth_openidc.so:/usr/local/apache2/modules/mod_auth_openidc.so
      - ./data/cometa/screenshots:/screenshots
    working_dir: /code/front
    privileged: true
    ports:
      - "80:80"
      - "443:443"
    entrypoint: sh -c '/code/front/start.sh compile ${DEV}'
    networks:
      - testing
    restart: always

  redis:
    image: cometa/redis:latest
    container_name: cometa_redis
    volumes:
      - redis_data:/data
    networks:
      - testing
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    restart: always

networks:
  testing:
    driver: "bridge"

volumes:
  redis_data: