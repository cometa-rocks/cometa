services:
  db:
    container_name: cometa_postgres
    image: postgres:12.1
    # platform hint for running on apple silicon
    platform: linux/amd64
    volumes:
      - ./data/db_data:/var/lib/postgresql/data
    expose:
      - "5532"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
     - testing
    restart: always

  django:
    container_name: cometa_django
    # platform hint for running on apple silicon
    platform: linux/amd64
    build:
      context: ./backend/src
      dockerfile: Dockerfile
    user: "0"  # This forces the container to run as root
    logging:
      driver: json-file
    command: bash start.sh -dev
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/cometa:/data:rw
      - ./data/cometa/backups:/data/backups:rw
      - ./data/cometa/screenshots:/data/screenshots
      - ./data/cometa/videos:/data/videos
      - ./data/cometa/pdf:/data/pdf
      - ./data/cometa/downloads:/data/downloads:rw
      - ./data/cometa/uploads:/data/uploads:rw
      - ./data/department_data:/data/department_data:rw
      - ./data/cometa/config:/code/config:rw
      - ./data/django/migrations:/opt/code/migrations:rw
      - ./data/django/logs:/opt/code/logs:rw
      - ./data/django/clamav:/var/lib/clamav:rw
      # - ./backend:/code
      # - ./backend/src:/opt/code:rw
    working_dir: /opt/code
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=dev
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy

      
    # links:
    #   - behave:cometabehave.local
    networks:
     - testing
    restart: always

  behave:
    container_name: cometa_behave
    # platform hint for running on apple silicon
    platform: linux/amd64
    logging:
      driver: json-file
    user: "0"  # This forces the container to run as root

    build:
      context: ./backend/behave
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
      # django:
      #   condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/cometa/screenshots:/data/screenshots
      - ./data/cometa/videos:/data/videos
      - ./data/cometa/downloads:/data/test/downloads
      - ./data/cometa/uploads:/data/test/uploads
      - ./data/cometa/html:/data/test/html
      - ./data/cometa/config:/code/config:rw
      - ./data/behave/logs:/code/src/logs:rw
      - ./data/department_data:/data/department_data:rw
      - ./data/redis/certs:/share/certs
      - ./data/share/code/behave/logs:/data/logs
      # - ./backend/behave:/opt/code:rw
      # - ./backend:/code
    command: "/opt/code/behave_django/entry.sh"
    # command:     sleep infinity
    working_dir: /opt/code/behave_django
    environment:
      PYTHONUNBUFFERED: 1
    networks:
     - testing
    restart: always

  ws:
    container_name: cometa_socket
    # platform hint for running on apple silicon
    platform: linux/amd64
    build:
      context: ./backend/ws-server
      dockerfile: Dockerfile
    logging:
      driver: json-file
    environment:
      - NODE_ENV=development
      - NPM_CONFIG_LOGLEVEL=info
    ports:
      - "3001:3001"
    networks:
     - testing
    restart: always

  # selenoid:
  #   # Please use ./selenoid/deploy_selenoid.sh to create necessary files of Selenoid
  #   image: aerokube/selenoid:1.11.2
  #   # platform hint for running on apple silicon
  #   platform: linux/amd64
  #   container_name: cometa_selenoid
  #   logging:
  #     driver: json-file
  #   ports:
  #     - 4444:4444
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./backend/selenoid/:/etc/selenoid/:rw
  #     - ./data/cometa/config/images:/code/config/images:rw
  #     - ./data/cometa/videos:/opt/selenoid/video
  #   environment:
  #     TZ: Europe/Berlin
  #     OVERRIDE_VIDEO_OUTPUT_DIR: ${PWD}/data/cometa/videos
  #   networks:
  #     - testing
  #   restart: always
  #   entrypoint: sh /etc/selenoid/start.sh

  novnc:
    image: cometa/novnc:1.6
    platform: linux/amd64
    container_name: cometa_novnc
    networks:
      - testing
    restart: always
  
  crontab:
    build:
      context: ./backend/scheduler
      dockerfile: Dockerfile
    # platform hint for running on apple silicon
    platform: linux/amd64
    container_name: cometa_crontab
    environment:
      CRONTAB_SERVER_URL: "crontab"
      CRONTAB_SERVER_PORT: "8080"
      SCHEDULER_HOST: "crontab"
      SCHEDULER_PORT: "8080"
      DEBUG_LEVEL: 10
    volumes:
      - ./backend/scheduler:/app:rw
    # command: sleep infinity
    networks:
      - testing
    restart: always

  # This service is only used for build the appium_inspector dist files
  # With image node:20, once build is done, copy the build files to front folder
  # When apache front container starts using image node:20 to build the front code, this can be done with in the apache container it self
  # After that appium.inspector should be removed 
  appium.inspector:
    image: node:20
    # platform hint for running on apple silicon
    platform: linux/amd64
    volumes:
      - ./front/appium-inspector-build:/app
      - ./front:/front
    working_dir: /front/appium-inspector-build
    command: bash appium_build.sh
    networks:
      - testing

  apache:
    build:
      context: ./front
      dockerfile: Dockerfile
    user: "0"  # This forces the container to run as root

    # platform hint for running on apple silicon
    platform: linux/amd64
    container_name: cometa_front
    volumes:
      - ./front:/code/front
      - ./data/front/apache2/metadata:/usr/local/apache2/conf/metadata
      #  cometa configurations are mounted to /usr/local/apache2/cometa_conf to issue of avoid file getting mounted as folder 
      #  and save mime configuration files with in the apache folder
      - ./data/front/apache2/conf:/usr/local/apache2/cometa_conf
      - ./data/front/apache2/certs:/share/apache2/certs
      - ./data/front/apache2/certs:/share/apache2/certs
      - ./data/cometa/screenshots:/screenshots
      - ./data/cometa/videos:/videos
    working_dir: /code/front
    ports:
      - "443:443"
      - "4200:4200"
    # command: bash /code/front/start.sh openidc basic angular compile serve-auto
    
    # healthcheck:
    #   test: ["CMD", "curl", "-s", "-k", "https://localhost/lb_test.html"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 60s

    # command: bash /code/start.sh compile 
    environment:
      - DJANGO_SERVER_URL=django
      - DJANGO_SERVER_PORT=8000
      - SOCKET_SERVER_URL=ws
      - SOCKET_SERVER_PORT=3001
      - NOVNC_SERVER_URL=novnc
      - NOVNC_SERVER_PORT=80
      - COMETA_USE_NGROK=false
    networks:
      - testing

  redis:
    build:
      context: ./backend/redis
      dockerfile: Dockerfile
    # platform hint for running on apple silicon
    platform: linux/amd64
    container_name: cometa_redis
    # volumes:
    #   - ./data/redis/data:/data
    networks:
      - testing
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    restart: always

networks:
  testing:
    driver: "bridge"

volumes:
  redis_data:
