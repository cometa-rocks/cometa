services:
  db:
    container_name: cometa_postgres
    image: postgres:12.1
    volumes:
      - ./backend:/code
      - ./backend/db_data:/var/lib/postgresql/data
    expose:
      - "5532"
    networks:
     - testing
    restart: always

  django:
    container_name: cometa_django
    image: python:3.9
    logging:
      driver: json-file
    command: bash start.sh
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/cometa/screenshots:/code/behave/screenshots
      - ./data/cometa/videos:/code/behave/videos
      - ./data/cometa/pdf:/code/behave/pdf
      - ./data/cometa/downloads:/code/behave/downloads
      - ./data/cometa/config:/code/config:rw
      - ./backend:/code
      - ./backend/src:/opt/code:rw
      - "./backend/crontabs/cometa_django_crontab:/etc/cron.d/crontab"
    working_dir: /opt/code
    environment:
      - PYTHONUNBUFFERED=1
    expose:
      - "8000"
    depends_on:
      - db
    links:
      - behave:cometabehave.local
    networks:
     - testing
    restart: always

  behave:
    container_name: cometa_behave
    image: python:3.9
    logging:
      driver: json-file
    expose:
      - "8001"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/cometa/screenshots:/opt/code/screenshots
      - ./data/cometa/videos:/opt/code/videos
      - ./data/cometa/pdf:/code/behave/pdf
      - ./data/cometa/downloads:/code/behave/downloads
      - ./data/redis/certs:/share/certs
      - ./data/cometa/config:/code/config:rw
      - ./backend/behave:/opt/code:rw
      - ./backend:/code
      - "./backend/behave/schedules/crontab:/etc/cron.d/crontab"
    command: /opt/code/entry.sh
    working_dir: /opt/code/behave_django
    environment:
      PYTHONUNBUFFERED: 1
    networks:
     - testing
    restart: always

  ws:
    container_name: cometa_socket
    image: node:14
    working_dir: /home/node/app
    logging:
      driver: json-file
    environment:
      - NODE_ENV=production
      - NPM_CONFIG_LOGLEVEL=info
    volumes:
      - ./backend/ws-server:/home/node/app:rw
    expose:
      - "5532"
    command: "npm run-script start"
    networks:
     - testing
    restart: always

  selenoid:
    # Please use ./selenoid/deploy_selenoid.sh to create necessary files of Selenoid
    image: aerokube/selenoid:1.11.2
    container_name: cometa_selenoid
    logging:
      driver: json-file
    expose:
      - "5532"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend/selenoid/:/etc/selenoid/:rw
      - ./data/cometa/config/images:/code/config/images:rw
      - ./data/cometa/videos:/opt/selenoid/video
    environment:
      TZ: Europe/Berlin
      OVERRIDE_VIDEO_OUTPUT_DIR: ${PWD}/data/cometa/videos
    networks:
      - testing
    restart: always
    entrypoint: sh /etc/selenoid/start.sh

  novnc:
    image: cometa/novnc:1.0
    container_name: cometa_novnc
    networks:
      - testing
    restart: always


  crontab:
    image: cometa/scheduler:latest
    container_name: cometa_crontab
    environment:
      CRONTAB_SERVER_URL: "crontab"
      CRONTAB_SERVER_PORT: "8080"
      SCHEDULER_HOST: "crontab"
      SCHEDULER_PORT: "8080"
    networks:
      - testing
    restart: always
  # Since this a deployment file, build image is used to spinup cometa_front 
  # n the build pipeline 
  apache:
    image: "cometa/front:latest"
    container_name: cometa_front
    volumes:
      - ./front/apache-conf/metadata:/code/front/apache-conf/metadata
      - ./front/apache-conf/httpd.conf:/usr/local/apache2/conf/httpd.conf
      - ./front/apache-conf/openidc.conf_<server>:/usr/local/apache2/conf/openidc.conf
      - ./front/apache-conf/paths.conf:/usr/local/apache2/conf/paths.conf
      - ./front/apache-conf/mod_auth_openidc.so:/usr/local/apache2/modules/mod_auth_openidc.so
      - ./data/cometa/screenshots:/screenshots
    working_dir: /code/front
    privileged: true
    ports:
      - "<outside_port>:80"
      - "443:443"
    entrypoint: bash /code/front/start_server.sh
    networks:
      - testing
    restart: always

  redis:
    image: redis:7.2.0-alpine
    container_name: cometa_redis
    volumes:
      - redis_data:/data
    networks:
      - testing
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    restart: always

networks:
  testing:
    driver: "bridge"

volumes:
  redis_data: