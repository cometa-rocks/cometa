services:
  db:
    container_name: cometa_postgres
    platform: linux/amd64  # <-- Force AMD64
    image: postgres:12.1
    volumes:
      - ./data/db_data:/var/lib/postgresql/data
    expose:
      - "5532"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
     - testing
    restart: always

  django:
    container_name: cometa_django
    image: cometa/django:latest
    platform: linux/amd64  #
    pull_policy: always
    restart: always
    user: "0"  # This forces the container to run as root
    logging:
      driver: json-file
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/cometa/screenshots:/data/screenshots
      - ./data/cometa/videos:/data/videos
      - ./data/cometa/downloads:/data/downloads:rw
      - ./data/cometa/uploads:/data/uploads:rw
      - ./data/cometa/pdf:/code/behave/pdf:rw
      - ./data/cometa/backups/features:/code/backups/features:rw
      - ./data/cometa/config:/code/config:rw
      - ./data/department_data:/data/department_data:rw
      - ./data/django/migrations:/opt/code/migrations:rw
      - ./data/django/logs:/opt/code/logs:rw
      - ./data/django/clamav:/var/lib/clamav:rw
      - ./data/share:/code:rw
    working_dir: /opt/code
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    environment:
      - PYTHONUNBUFFERED=1
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
     - testing

  behave:
    container_name: cometa_behave
    platform: linux/amd64  # <-- Force AMD64
    image: cometa/behave:latest
    pull_policy: always
    restart: always
    user: "0"  # This forces the container to run as root
    logging:
      driver: json-file
    expose:
      - "8001"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/cometa/screenshots:/data/screenshots
      - ./data/cometa/videos:/data/videos
      - ./data/cometa/downloads:/data/test/downloads
      - ./data/cometa/uploads:/data/test/uploads
      - ./data/cometa/html:/data/test/html
      - ./data/cometa/config:/code/config:rw
      - ./data/behave/logs:/code/src/logs:rw
      - ./data/department_data:/data/department_data:rw
      - ./data/redis/certs:/share/certs
      - ./data/share/code/behave/logs:/data/logs
      # - ./backend/behave:/opt/code:rw
    working_dir: /opt/code/behave_django
    environment:
      PYTHONUNBUFFERED: 1
    networks:
     - testing

  ws:
    container_name: cometa_socket
    image: cometa/socket:latest
    platform: linux/amd64  # <-- Force AMD64
    pull_policy: always
    restart: always
    environment:
      - NODE_ENV=production
      - NPM_CONFIG_LOGLEVEL=info
    expose:
      - "3001"
    networks:
     - testing

  # selenoid:
  #   # Please use ./selenoid/deploy_selenoid.sh to create necessary files of Selenoid
  #   image: aerokube/selenoid:1.11.2
  #   platform: linux/amd64  # <-- Force AMD64
  #   container_name: cometa_selenoid
  #   logging:
  #     driver: json-file
  #   ports:
  #     - 4444:4444
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./backend/selenoid/:/etc/selenoid/:rw
  #     - ./data/cometa/config/images:/code/config/images:rw
  #     - ./data/cometa/videos:/opt/selenoid/video
  #   environment:
  #     TZ: Europe/Berlin
  #     OVERRIDE_VIDEO_OUTPUT_DIR: ${PWD}/data/cometa/videos
  #   networks:
  #     - testing
  #   restart: always
  #   entrypoint: sh /etc/selenoid/start.sh

  novnc:
    image: cometa/novnc:1.6
    platform: linux/amd64  # <-- Force AMD64
    pull_policy: always
    restart: always
    container_name: cometa_novnc
    networks:
      - testing

  crontab:
    container_name: cometa_crontab
    image: cometa/scheduler:latest
    platform: linux/amd64  # <-- Force AMD64
    pull_policy: always
    restart: always
    environment:
      CRONTAB_SERVER_URL: "crontab"
      CRONTAB_SERVER_PORT: "8080"
      SCHEDULER_HOST: "crontab"
      SCHEDULER_PORT: "8080"
    networks:
      - testing

  # Since this a deployment file, build image is used to start cometa_front 
  # n the build pipeline 
  apache:
    image: "cometa/front:latest"
    platform: linux/amd64  
    pull_policy: always
    restart: always
    user: "0"  # This forces the container to run as root
    container_name: cometa_front
    volumes:
      - ./data/front/apache2/metadata:/usr/local/apache2/conf/metadata
      # httpd.conf file and paths.conf file are kept during build, 
      # cometa_conf folder is only mapped for openidc.conf file
      - ./data/front/apache2/conf:/usr/local/apache2/cometa_conf
      - ./data/front/apache2/certs:/share/apache2/certs
      - ./data/cometa/screenshots:/screenshots
      - ./data/cometa/videos:/videos
      - ./front/apache2:/code/front/apache2
      # Use below line to mount the company logo in the login page
      # - /share/front/apache2/icons/{{COMPANY}}.svg:/usr/local/apache2/htdocs/assets/icons/{{COMPANY}}.svg

    working_dir: /code/front
    privileged: true
    ports:
      - "<outside_port>:80"
      - "443:443"
    entrypoint: bash /code/front/start_server.sh
    healthcheck:
      test: ["CMD", "curl", "-s", "-k", "https://localhost/welcome.html"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 6s

    environment:
      - DJANGO_SERVER_URL=django
      - DJANGO_SERVER_PORT=8000
      - SOCKET_SERVER_URL=ws
      - SOCKET_SERVER_PORT=3001
      - NOVNC_SERVER_URL=novnc
      - NOVNC_SERVER_PORT=80
    networks:
      - testing


  redis:
    container_name: cometa_redis
    image: redis:7.2.0
    platform: linux/amd64  # <-- Force AMD64
    pull_policy: always
    restart: always
    volumes:
      - ./data/redis/data:/data
    networks:
      - testing
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

networks:
  testing:
    driver: "bridge"

volumes:
  redis_data: